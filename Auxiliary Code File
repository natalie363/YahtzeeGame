"""
This is the auxiliary file for my Yahtzee game, it will contain the dice symbol translations and game play instructions
sources:
prettytable info: https://ptable.readthedocs.io/en/latest/tutorial.html
texttable info: https://pypi.org/project/texttable/
https://realpython.com/python-dice-roll/#set-up-the-diagram-of-dice-faces - I took the code for the dice pictures from
here because I needed to be able to make the circle symbol and didn't know how to do that from my keyboard. It was just
for design and doesn't impact the actual functionality of this in any way.
https://www.fileformat.info/info/unicode/char/search.htm?q=die&preview=entity - I didn't end up using the UTF8 encodings,
but learned about them here
"""
import texttable
from prettytable import PrettyTable

def directions():
    """
    This includes directions on how to play Yahtzee, available upon request from requestDirections function
    :return:
    """
    print('Yahtzee is a dice game where you roll 5 dice in an attempt to make patterns.')
    print('You get three rolls per turn, and can pick to save dice or roll them all again.')
    print('After the third roll, you must pick a category to place the roll in.')
    print("If your roll doesn't fit anywhere, pick a category to receive a zero in.")
    print()
    print('For the categories Ones - Sixes, try to get as many dice as possible of that type.')
    print('This is considered the upper section, get 63 points here to receive a bonus of 35 additional points.')
    print()
    print('The lower section categories are all unique.')
    print('Three of a kind or four of a kind are 3 or 4 matching dice respectively.')
    print('Full House is 3 of one number and 2 of another.')
    print('A Small Straight is 4 dice in ascending value (ex. 1,2,3,4) and a Large Straight is 5 (ex. 2,3,4,5,6)')
    print('To get a Yahtzee you need all five dice to match.')
    print('Chance is the total of all dice. It has no requirements.')
    print('Enjoy your game!')
    print()
    print()

# Got the idea for this from https://realpython.com/python-dice-roll/#set-up-the-diagram-of-dice-faces
diceFaces = {
  1: (
        "┌─────────┐",
        "│         │",
        "│    ●    │",
        "│         │",
        "└─────────┘",
    ),
  2: (
        "┌─────────┐",
        "│      ●  │",
        "│         │",
        "│  ●      │",
        "└─────────┘",
    ),
  3: (
        "┌─────────┐",
        "│      ●  │",
        "│    ●    │",
        "│  ●      │",
        "└─────────┘",
    ),
  4: (
        "┌─────────┐",
        "│  ●   ●  │",
        "│         │",
        "│  ●   ●  │",
        "└─────────┘",
    ),
  5: (
        "┌─────────┐",
        "│  ●   ●  │",
        "│    ●    │",
        "│  ●   ●  │",
        "└─────────┘",
    ),
  6: (
        "┌─────────┐",
        "│  ●   ●  │",
        "│  ●   ●  │",
        "│  ●   ●  │",
        "└─────────┘",
    )
}

def prettyDice(allDice):
    """
    This function takes the numerical value of dice and turns them to pictures using prettyTable because PrettyTable
    doesn't include lines between each row
    :param allDice: list piped in from main file when it's called
    :return: none
    """
    diceTable = PrettyTable()
    diceTable.clear()
    diceTable.field_names = [1,2,3,4,5]
    row1 = []
    row2 = []
    row3 = []
    row4 = []
    row5 = []
    count = 1

    while count <= 5:
        if allDice[count - 1] == 1:
            row1.append(diceFaces[1][0])
            row2.append(diceFaces[1][1])
            row3.append(diceFaces[1][2])
            row4.append(diceFaces[1][3])
            row5.append(diceFaces[1][4])
            count += 1
        elif allDice[count - 1] == 2:
            row1.append(diceFaces[2][0])
            row2.append(diceFaces[2][1])
            row3.append(diceFaces[2][2])
            row4.append(diceFaces[2][3])
            row5.append(diceFaces[2][4])
            count += 1
        elif allDice[count - 1] == 3:
            row1.append(diceFaces[3][0])
            row2.append(diceFaces[3][1])
            row3.append(diceFaces[3][2])
            row4.append(diceFaces[3][3])
            row5.append(diceFaces[3][4])
            count += 1
        elif allDice[count - 1] == 4:
            row1.append(diceFaces[4][0])
            row2.append(diceFaces[4][1])
            row3.append(diceFaces[4][2])
            row4.append(diceFaces[4][3])
            row5.append(diceFaces[4][4])
            count += 1
        elif allDice[count - 1] == 5:
            row1.append(diceFaces[5][0])
            row2.append(diceFaces[5][1])
            row3.append(diceFaces[5][2])
            row4.append(diceFaces[5][3])
            row5.append(diceFaces[5][4])
            count += 1
        elif allDice[count - 1] == 6:
            row1.append(diceFaces[6][0])
            row2.append(diceFaces[6][1])
            row3.append(diceFaces[6][2])
            row4.append(diceFaces[6][3])
            row5.append(diceFaces[6][4])
            count += 1
        else:
            break

    diceTable.add_row(row1)
    diceTable.add_row(row2)
    diceTable.add_row(row3)
    diceTable.add_row(row4)
    diceTable.add_row(row5)
    print(diceTable)
